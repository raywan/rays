#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import fnmatch
from ninja_syntax import Writer

PROJECT_NAME = 'toy'

CC = 'g++' if sys.platform != 'win32' else 'cl'
CFLAGS = []
if sys.platform == 'win32':
    CFLAGS = ['/O2', '/EHsc', '/Zi', '/I..\include']
else:
    CFLAGS = ['-std=c++11', '-O3', '-pthread', '-march=native', '-Iinclude']

SRC_DIR = 'src'
BUILD_DIR = 'build'
BIN_DIR = 'bin'

with open('build.ninja', 'w') as build_file:
    n = Writer(build_file)

    n.comment('THIS FILE IS GENERATED BY configure.py')
    n.comment('EDITS WILL BE OVERWRITTEN')
    n.newline()

    ############################################################################
    # VARIABLES
    ############################################################################

    n.variable(key='ninja_required_version', value='1.9')

    n.variable(key='cc', value=CC)
    n.variable(key='cflags', value=' '.join(CFLAGS))
    n.variable(key='project_name', value=PROJECT_NAME)
    n.variable(key='src_dir', value=SRC_DIR)
    n.variable(key='bin_dir', value=BIN_DIR)
    n.variable(key='build_dir', value=BUILD_DIR)

    n.newline()

    ############################################################################
    # RULES
    ############################################################################

    if sys.platform == 'win32':
        n.rule('compile', command='$cc $cflags /c $in /Fo$build_dir')
    else:
        n.rule('compile',
               command='$cc $cflags -c $in -o $out -MMD -MF $out.d',
               depfile='$out.d')

    if sys.platform == 'win32':
        n.rule('link', command='link $in /OUT:$bin_dir/$out')
    else:
        n.rule('link', command='$cc $in -o $bin_dir/$out')

    n.rule('clean_all', command='rm -rf $build_dir $bin_dir $project_name')
    n.rule('make_dirs', command='mkdir -p $build_dir $bin_dir')
    if sys.platform == 'win32':
        n.rule('create_sym_link', command='mklink $bin_dir/$project_name $project_name')
    else:
        n.rule('create_sym_link', command='ln -sf $bin_dir/$project_name $project_name')

    n.newline()

    ############################################################################
    # BUILDS
    ############################################################################

    n.build(outputs='dirs', rule='make_dirs')
    n.build(outputs='fresh', rule='clean_all')
    n.build(outputs='sym', rule='create_sym_link')

    sources = []
    for (root, dirnames, filenames) in os.walk(SRC_DIR):
        for filename in fnmatch.filter(filenames, '*.cpp'):
            if 'win32_' not in filename:
                sources.append(os.path.join(root, filename))

    for source in sources:
        n.build(outputs=source.replace('.cpp', '.o').replace('src',
                BUILD_DIR), rule='compile', inputs=source)

    o_files = []
    if sys.platform == 'win32':
        o_files = [x.replace('.cpp', '.obj').replace('src', BUILD_DIR) for x in sources]
    else:
        o_files = [x.replace('.cpp', '.o').replace('src', BUILD_DIR) for x in sources]

    n.build(outputs=PROJECT_NAME, rule='link', inputs=o_files)

    n.newline()

    ############################################################################
    # DEFAULTS
    ############################################################################

    n.default('dirs')
    n.default(PROJECT_NAME)
    n.default('sym')

